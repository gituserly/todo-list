[{"D:\\test\\my-apply\\src\\index.js":"1","D:\\test\\my-apply\\src\\reportWebVitals.js":"2","D:\\test\\my-apply\\src\\App.jsx":"3","D:\\test\\my-apply\\src\\Todolistreturn.jsx":"4","D:\\test\\my-apply\\src\\Todolist.jsx":"5","D:\\test\\my-apply\\src\\Todo.jsx":"6","D:\\test\\my-apply\\src\\TodoList.jsx":"7","D:\\test\\my-apply\\src\\Warning.jsx":"8","D:\\test\\my-apply\\src\\Trytodo.jsx":"9","D:\\test\\my-apply\\src\\flex.jsx":"10","D:\\test\\my-apply\\src\\position.jsx":"11","D:\\test\\my-apply\\src\\animation.jsx":"12","D:\\test\\my-apply\\src\\demo\\TodoList.jsx":"13","D:\\test\\my-apply\\src\\demo\\Header.jsx":"14","D:\\test\\my-apply\\src\\demo\\Todo.jsx":"15","D:\\test\\my-apply\\src\\demo\\Footer.jsx":"16","D:\\test\\my-apply\\src\\class.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":532,"mtime":1613200845151,"results":"21","hashOfConfig":"19"},{"size":4231,"mtime":1610606887073,"results":"22","hashOfConfig":"19"},{"size":1717,"mtime":1607858586914,"results":"23","hashOfConfig":"19"},{"size":528,"mtime":1610530233487,"results":"24","hashOfConfig":"19"},{"size":2487,"mtime":1610629521062,"results":"25","hashOfConfig":"19"},{"size":827,"mtime":1608207008556,"results":"26","hashOfConfig":"19"},{"size":10672,"mtime":1612702562376,"results":"27","hashOfConfig":"19"},{"size":506,"mtime":1612943784544,"results":"28","hashOfConfig":"19"},{"size":489,"mtime":1612531012107,"results":"29","hashOfConfig":"19"},{"size":513,"mtime":1612662000652,"results":"30","hashOfConfig":"19"},{"size":4759,"mtime":1612771403838,"results":"31","hashOfConfig":"19"},{"size":769,"mtime":1612751284954,"results":"32","hashOfConfig":"19"},{"size":1577,"mtime":1612771403838,"results":"33","hashOfConfig":"19"},{"size":849,"mtime":1612752175586,"results":"34","hashOfConfig":"19"},{"size":1710,"mtime":1613359390991,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1r1urrb",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\test\\my-apply\\src\\index.js",[],["76","77"],"D:\\test\\my-apply\\src\\reportWebVitals.js",[],"D:\\test\\my-apply\\src\\App.jsx",["78","79","80","81","82","83","84"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Todolistreturn from \"./Todolistreturn\";\n// import TodoList from \"./TodoList\";\nimport Warning from \"./Warning\";\nimport Trytodo from \"./Trytodo\";\nimport Flex from \"./flex\";\nimport Position from \"./position\";\nimport Animation from \"./animation\";\nimport TodoList from './demo/TodoList';\nimport './class';\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\">\n        \n        <Flex/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\test\\my-apply\\src\\Todolistreturn.jsx",[],"D:\\test\\my-apply\\src\\Todolist.jsx",[],"D:\\test\\my-apply\\src\\Todo.jsx",[],["85","86"],"D:\\test\\my-apply\\src\\TodoList.jsx",[],"D:\\test\\my-apply\\src\\Warning.jsx",[],"D:\\test\\my-apply\\src\\Trytodo.jsx",["87","88","89"],"import React from \"react\";\r\nimport \"./Trytodo.css\";\r\nconst tabs = [\r\n  { key: 1, value: \"All\" },\r\n  { key: 2, value: \"Active\" },\r\n  { key: 3, value: \"Completed\" },\r\n];\r\n\r\nexport default class Trytodo extends React.Component {\r\n  id = 0;\r\n  state = {\r\n    shuru: \"\",\r\n    list: [],\r\n    inputid: null,\r\n    activetabs: 1,\r\n    temporaryvalue: null,\r\n  };\r\n  componentDidMount() {\r\n    document.body.addEventListener('click',this.restoreTodo)\r\n  }\r\n  componentWillUnmount() {\r\n    document.body.removeEventListener('click', this.restoreTodo)\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ shuru: e.target.value });\r\n    //* console.log(e.target.value)\r\n  };\r\n\r\n  handleKeyDown = (e) => {\r\n    //* console.log(this.state.shuru)\r\n\r\n    if (e.keyCode === 13) {\r\n      //或者写成（e.keyCode === 13  && this.state.shuru !==\"\"）\r\n      if (this.state.shuru === \"\") {\r\n        return;\r\n      }\r\n      const { list, shuru } = this.state;\r\n\r\n      this.setState({\r\n        list: [\r\n          ...list,\r\n          {\r\n            id: this.id++,\r\n            isCompleted: false,\r\n            value: shuru,\r\n          },\r\n        ],\r\n        shuru: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  changeStatus = (e, id) => {\r\n    //这里的id是下面onChange={(e) => this.changeStatus(e, item.id)\r\n    //里面传入的item.id\r\n    const checked = e.target.checked;\r\n    this.setState({\r\n      list: this.state.list.map((item) =>\r\n        item.id === id ? { ...item, isCompleted: checked } : item\r\n      ),\r\n    });\r\n  };\r\n  ShanchuStatus = (id) => {\r\n    const alist = this.state.list.filter((listitem) => {\r\n      return listitem.id !== id;\r\n    });\r\n    this.setState({ list: alist });\r\n  };\r\n\r\n  changeValue = (e, id) => {\r\n    const evalue = e.target.value;\r\n    this.setState({ temporaryvalue: evalue });\r\n\r\n    //* const vlist = this.state.list.map((item) => {\r\n    //   return item.id === id ? { ...item, value: evalue } : item;\r\n    //});\r\n\r\n    // this.setState({ list: vlist });*//\r\n  };\r\n  onDoubleClick = (id, value) => {\r\n    this.setState({ inputid: id });\r\n  };\r\n\r\n  saveValue = (e, va) => {\r\n    console.log(va);\r\n    if (e.keyCode === 13 && va !== \"\") {\r\n      this.setState({ inputid: null });\r\n    }\r\n    const tem = this.state.list.map((listitem) => {\r\n      return { ...listitem, value: this.state.temporaryvalue };\r\n    });\r\n    this.setState({ list: tem });\r\n\r\n  };\r\n  changeActivetab = (key) => {\r\n    this.setState({ activetabs: key });\r\n  };\r\n  clearAll = () => {\r\n    this.setState({ list: [] });\r\n  };\r\n  clearCurrentList = () => {\r\n    {\r\n      const clearcurr = this.state.list.filter((listitem) => {\r\n        return listitem.isCompleted === true;\r\n      });\r\n      this.setState({ list: clearcurr });\r\n    }\r\n  };\r\n  clearCompletedList = () => {\r\n    {\r\n      const clearcom = this.state.list.filter((listitem) => {\r\n        return listitem.isCompleted === false;\r\n      });\r\n      this.setState({ list: clearcom });\r\n    }\r\n  };\r\n  changCompletedList = () => {\r\n    {\r\n      const changcom = this.state.list.map((listitem) => {\r\n        return { ...listitem, isCompleted: false };\r\n      });\r\n      this.setState({ list: changcom });\r\n    }\r\n  };\r\n  changeCurrentList = () => {\r\n    const changecurr = this.state.list.map((listitem) => {\r\n      return { ...listitem, isCompleted: true };\r\n    });\r\n    this.setState({ list: changecurr });\r\n  };\r\n  changeZhuangtai = () => {\r\n    const al = this.state.list.filter((item) => {\r\n      return item.isCompleted === false;\r\n    }).length;\r\n    console.log(al);\r\n    console.log(this.state.list);\r\n    if (al === 0) {\r\n      const changcom = this.state.list.map((listitem) => {\r\n        return { ...listitem, isCompleted: false };\r\n      });\r\n      this.setState({ list: changcom });\r\n    } else {\r\n      const changecurr = this.state.list.map((listitem) => {\r\n        return { ...listitem, isCompleted: true };\r\n      });\r\n      console.log(\"changecurr\", changecurr);\r\n\r\n      this.setState({ list: changecurr });\r\n    }\r\n  };\r\n\r\n  restoreTodo = () =>{\r\n    console.log(1);\r\n    this.setState({temporaryvalue:null,inputid:null})\r\n  }\r\n\r\n  render() {\r\n    const currentList = this.state.list.filter((item) => !item.isCompleted);\r\n\r\n    const completedList = this.state.list.filter((item) => item.isCompleted);\r\n\r\n    return (\r\n      <div className=\"todolist\">\r\n        <h1 className=\"h1\">todos</h1>\r\n        <div className=\"content\" >\r\n          <div className=\"header\">\r\n            <button onClick={this.changeZhuangtai} className=\"button-status\">\r\n              {this.state.list.filter((item) => {\r\n                return item.isCompleted === false;\r\n              }).length === 0\r\n                ? \"changecur\"\r\n                : \"changecom\"}\r\n            </button>\r\n            <input\r\n              className=\"inputbox\"\r\n              type=\"text\"\r\n              placeholder=\"what needs to be done?\"\r\n              value={this.state.shuru}\r\n              onChange={this.handleChange}\r\n              onKeyDown={this.handleKeyDown}\r\n            />\r\n          </div>\r\n\r\n          {this.state.activetabs !== 3 ? (\r\n            <div>\r\n              {currentList.map((item) => (\r\n                <div key={item.id} className=\"todo-list\" onClick={(e)=> e.stopPropagation()}>\r\n                  {this.state.inputid === item.id ? null : (\r\n                    <div className=\"check-box\">\r\n                      <input\r\n                        className=\"check-radio\"\r\n                        type=\"radio\"\r\n                        onChange={(e) => this.changeStatus(e, item.id)}\r\n                      />\r\n                      <div className=\"check-ui\"></div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {this.state.inputid === item.id ? (\r\n                    <div className=\"todo-input\">\r\n                      <input\r\n                        className=\"input-value\"\r\n                        value={this.state.temporaryvalue}\r\n                        onChange={(e) => this.changeValue(e, item.id)}\r\n                        onKeyDown={(e) => this.saveValue(e, item.value)}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"todovalue\">\r\n                      <div\r\n                        onDoubleClick={() =>\r\n                          this.onDoubleClick(item.id, item.value)\r\n                        }\r\n                      >\r\n                        {item.value}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"todobutton\">\r\n                    <span\r\n                      className=\"detele\"\r\n                      onClick={() => this.ShanchuStatus(item.id)}\r\n                    >\r\n                      x\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n\r\n          {this.state.activetabs !== 2 ? (\r\n            <div>\r\n              {completedList.map((item) => (\r\n                <div key={item.id} className=\"todo-list\">\r\n                  {this.state.inputid === item.id ? null : (\r\n                    <div className=\"check-box\">\r\n                      <input\r\n                        className=\"check-radio\"\r\n                        type=\"radio\"\r\n                        onChange={(e) => this.changeStatus(e, item.id)}\r\n                      />\r\n                      <div\r\n                        className={`check-ui ${\r\n                          item.isCompleted ? \"checked\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {item.isCompleted ? \"√\" : \"\"}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"todovalue\">\r\n                    {this.state.inputid === item.id ? (\r\n                      //inputdi没用定义必须用this.state.inputid\r\n                      <input\r\n                        className=\"input-value\"\r\n                        value={item.value}\r\n                        onChange={(e) => this.changeValue(e, item.id)}\r\n                        onKeyDown={(e) => this.saveValue(e, item.value)}\r\n                      />\r\n                    ) : (\r\n                      <span onDoubleClick={() => this.onDoubleClick(item.id)}>\r\n                        {item.value}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"todobutton\">\r\n                    <button\r\n                      className=\"detele\"\r\n                      onClick={\r\n                        () => this.ShanchuStatus(item.id)\r\n                        //传入参数item.id，在函数中传入的第一个参数就是item.id，\r\n                        //可以用a，b，c，任意一个代替，表示第一个参数意义就是item.id\r\n                      }\r\n                    >\r\n                      x\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n          {/*\r\n          <button className=\"button\"onClick={this.clearAll}> clear ALL</button>\r\n      <button  className= \"button\" onClick={()=>this.clearCurrentList()}>\r\n           clear currentList</button>   \r\n      <button  className= \"button\" onClick={()=>this.clearCompletedList()}>\r\n           clear completedList</button>      \r\n      <button  className= \"button\" onClick={this.changCompletedList}>\r\n           chang completedList</button>       \r\n      <button className = 'button' onClick={this.changeCurrentList}>\r\nchange CurretList</button> */}\r\n          {this.state.list.length !== 0 ? (\r\n            <div className=\"bottom\">\r\n              <div>{currentList.length}items left</div>\r\n              <div className=\"text\">\r\n                {tabs.map((tab) => {\r\n                  return (\r\n                    <span\r\n                      key={tab.key}\r\n                      //* onClick={()=>{this.setState({activetabs:tab.key})}}\r\n                      onClick={() => this.changeActivetab(tab.key)}\r\n                    >\r\n                      <span className={tab.value}>{tab.value}</span>\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <div className=\"clear\">\r\n                {completedList.length !== 0 ? (\r\n                  <button\r\n                    className=\"All\"\r\n                    onClick={() => this.clearCompletedList()}\r\n                  >\r\n                    clear completed\r\n                  </button>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\test\\my-apply\\src\\flex.jsx",[],"D:\\test\\my-apply\\src\\position.jsx",[],"D:\\test\\my-apply\\src\\animation.jsx",[],"D:\\test\\my-apply\\src\\demo\\TodoList.jsx",[],"D:\\test\\my-apply\\src\\demo\\Header.jsx",[],["90","91"],"D:\\test\\my-apply\\src\\demo\\Todo.jsx",["92"],"import React from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nexport default class Todo extends React.Component {\r\n  render() {\r\n    const {\r\n      listItem,\r\n      toggleCompleted,\r\n      deleteTodo,\r\n      setEditTodo,\r\n      changeEditTodo,\r\n      editTodo,\r\n      updateTodoList,\r\n      clearEditTodo,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        className=\"todo-item\"\r\n        onClick={(e) => {\r\n          if (editTodo.id === listItem.id) {\r\n            e.stopPropagation();//防止注入\r\n          }\r\n        }}\r\n      >\r\n        {editTodo.id === listItem.id ? (\r\n          <input\r\n            type=\"text\"\r\n            value={editTodo.value}\r\n            onChange={changeEditTodo}\r\n            onKeyDown={updateTodoList}\r\n            onBlur={() => {\r\n              console.log(\"onblur\");\r\n              // clearEditTodo()\r\n            }}\r\n          />\r\n        ) : (\r\n          <>\r\n            <div\r\n              className={`checked-box ${\r\n                listItem.isCompleted ? \"completed\" : \"\"\r\n              }`}\r\n              onClick={() => toggleCompleted(listItem.id)}\r\n            >\r\n              {listItem.isCompleted ? \"√\" : \"\"}\r\n            </div>\r\n            <div\r\n              className=\"todo-value\"\r\n              onDoubleClick={() => setEditTodo(listItem)}\r\n            >\r\n              {listItem.value}\r\n            </div>\r\n            <div\r\n              className=\"delete-button\"\r\n              onClick={() => deleteTodo(listItem.id)}\r\n            >\r\n              x\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\test\\my-apply\\src\\demo\\Footer.jsx",[],"D:\\test\\my-apply\\src\\class.js",["93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":8,"nodeType":"100","messageId":"101","endLine":1,"endColumn":12},{"ruleId":"98","severity":1,"message":"102","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":22},{"ruleId":"98","severity":1,"message":"103","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":15},{"ruleId":"98","severity":1,"message":"104","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":15},{"ruleId":"98","severity":1,"message":"105","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":16},{"ruleId":"98","severity":1,"message":"106","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":17},{"ruleId":"98","severity":1,"message":"107","line":10,"column":8,"nodeType":"100","messageId":"101","endLine":10,"endColumn":16},{"ruleId":"94","replacedBy":"108"},{"ruleId":"96","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":103,"column":5,"nodeType":"112","messageId":"113","endLine":108,"endColumn":6},{"ruleId":"110","severity":1,"message":"111","line":111,"column":5,"nodeType":"112","messageId":"113","endLine":116,"endColumn":6},{"ruleId":"110","severity":1,"message":"111","line":119,"column":5,"nodeType":"112","messageId":"113","endLine":124,"endColumn":6},{"ruleId":"94","replacedBy":"114"},{"ruleId":"96","replacedBy":"115"},{"ruleId":"98","severity":1,"message":"116","line":14,"column":7,"nodeType":"100","messageId":"101","endLine":14,"endColumn":20},{"ruleId":"98","severity":1,"message":"117","line":59,"column":10,"nodeType":"100","messageId":"101","endLine":59,"endColumn":16},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Todolistreturn' is defined but never used.","'Warning' is defined but never used.","'Trytodo' is defined but never used.","'Position' is defined but never used.","'Animation' is defined but never used.","'TodoList' is defined but never used.",["118"],["119"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["118"],["119"],"'clearEditTodo' is assigned a value but never used.","'asleep' is defined but never used.","no-global-assign","no-unsafe-negation"]